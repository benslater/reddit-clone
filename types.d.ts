export interface RedditListingResponse<T extends RedditPost | RedditSubreddit> {
  kind: 'Listing' | null;
  data: {
    modhash: null;
    dist: number;
    children: T[];
    after: null | string;
    before: null | string;
  } | null;
}

// Incomplete interface - needs to be expanded as functionality added
export interface RedditPost {
  kind: string;
  data: {
    approved_at_utc: string | null;
    subreddit: string;
    selftext: string;
    author_fullname: string;
    saved: boolean;
    mod_reason_title: null;
    gilded: number;
    clicked: boolean;
    title: string;
    subreddit_name_prefixed: string;
    hidden: boolean;
    pwls: number;
    downs: number;
    hide_score: boolean;
    name: string;
    quarantine: boolean;
    ups: number;
    total_awards_received: number;
    is_original_content: boolean;
    is_meta: boolean;
    can_mod_post: boolean;
    score: number;
    author_premium: boolean;
    thumbnail: string;
    edited: boolean;
    is_self: boolean;
    created: number;
    link_flair_type: string;
    wls: number;
    author_flair_type: string;
    domain: string;
    allow_live_comments: boolean;
    selftext_html: string;
    archived: boolean;
    no_follow: boolean;
    is_crosspostable: boolean;
    pinned: boolean;
    over_18: boolean;
    media_only: boolean;
    can_gild: boolean;
    spoiler: boolean;
    locked: boolean;
    visited: boolean;
    subreddit_id: string;
    link_flair_background_color: string;
    id: string;
    is_robot_indexable: boolean;
    author: string;
    num_comments: number;
    send_replies: boolean;
    whitelist_status: string;
    contest_mode: boolean;
    author_patreon_flair: boolean;
    permalink: string;
    parent_whitelist_status: string;
    stickied: boolean;
    url: string;
    subreddit_subscribers: number;
    created_utc: number;
    num_crossposts: number;
    is_video: boolean;
    post_hint: string;
  };
}

export interface RedditSubreddit {
  submit_text_html: string;
  restrict_posting: boolean;
  user_is_banned: boolean;
  free_form_reports: boolean;
  wiki_enabled: boolean;
  user_is_muted: boolean;
  display_name: string;
  header_img: string;
  title: string;
  icon_size: number[];
  primary_color: string;
  icon_img: string;
  display_name_prefixed: string;
  public_traffic: boolean;
  subscribers: number;
  videostream_links_count: number;
  name: string;
  quarantine: boolean;
  hide_ads: boolean;
  emojis_enabled: boolean;
  advertiser_category: '';
  public_description: string;
  comment_score_hide_mins: number;
  user_has_favorited: boolean;
  community_icon: string;
  banner_background_image: string;
  original_content_tag_enabled: boolean;
  submit_text: string;
  description_html: string;
  spoilers_enabled: boolean;
  header_title: string;
  header_size: number[];
  user_flair_position: string;
  all_original_content: boolean;
  has_menu_widget: boolean;
  key_color: string;
  can_assign_user_flair: boolean;
  created: number;
  wls: number;
  show_media_preview: boolean;
  submission_type: string;
  user_is_subscriber: boolean;
  disable_contributor_requests: boolean;
  allow_videogifs: boolean;
  user_flair_type: string;
  allow_polls: boolean;
  collapse_deleted_comments: boolean;
  emojis_custom_size: number[];
  public_description_html: string;
  allow_videos: boolean;
  is_crosspostable_subreddit: boolean;
  notification_level: string;
  can_assign_link_flair: boolean;
  accounts_active_is_fuzzed: boolean;
  submit_text_label: string;
  link_flair_position: string;
  user_flair_enabled_in_sr: boolean;
  allow_discovery: boolean;
  user_sr_theme_enabled: boolean;
  link_flair_enabled: boolean;
  subreddit_type: string;
  banner_img: string;
  banner_background_color: string;
  show_media: boolean;
  id: string;
  user_is_moderator: boolean;
  over18: boolean;
  description: string;
  submit_link_label: string;
  restrict_commenting: boolean;
  allow_images: boolean;
  lang: string;
  whitelist_status: string;
  url: string;
  created_utc: number;
  banner_size: number[];
  mobile_banner_image: string;
  user_is_contributor: boolean;
}
